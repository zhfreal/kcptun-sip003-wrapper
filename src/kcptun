#!/bin/bash
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# If you have suggestions or find some bug of this script, please create an issue on this page
# https://github.com/zhanhb/kcptun-sip003-wrapper/issues
set -e

child_pid=

func_trap() {
    local signal="$1"
    # we can't kill background child process with signal INT
    if [[ "$signal" == INT ]]; then signal=TERM; fi
    if [[ -n "$child_pid" ]]; then
        kill -s "$signal" "$child_pid" || true
    fi
}

trap_with_arg() {
    local func sig
    func="$1"
    shift
    for sig ; do
        trap "$func $sig" "$sig"
    done
}

has_builtin() {
    [[ "$(command -v "$1")" == "$1" ]]
}

execute() {
    local type bin key0 value0 key1 value1

    findBinary() {
        local os=`uname -s | awk '{print tolower($0)}'`
        local suffix dir name
        case "$os" in
            MINGW*|CYGWIN*|mingw*|cygwin*) os=windows; suffix=".exe";;
        esac
        local arch=`uname -m | sed -e 's/^[Ii][3-6]86$/386/;s/^[Xx]86$/386/;s/^[Xx]\(86[-_]\)\{0,1\}64$/amd64/;s/^[Aa][Mm][Dd]64$/amd64/'`
        local cwd="`pwd`"
        local bn="`basename "$0"`"
        bn="${bn%.*}"

        # looking in current directory
        for type in client server; do
            for name in "${bn}_$type" "${bn}-$type" "${type}_${os}_$arch"; do
                bin="$cwd/$name$suffix"
                if [[ -f "$bin" ]] && [[ -x "$bin" ]]; then return; fi
            done
            if [[ "$arch" == "amd64" ]]; then
                bin="$cwd/${type}_${os}_386$suffix"
                if [[ -f "$bin" ]] && [[ -x "$bin" ]]; then return; fi
            fi
        done

        # looking in $PATH with command "command"
        for type in client server; do
            for name in "${bn}_$type" "${bn}-$type" "${type}_${os}_$arch"; do
                bin=`command -v "$name" || true`
                if [[ -n "$bin" ]]; then return; fi
            done
	   if [[ "$arch" == "amd64" ]]; then
                bin=$(command -v ${type}_${os}_386$suffix)
                if [[ -n "$bin" ]]; then return; fi
           fi
        done

        local offset=0 last=0 pth="$PATH" ch
        while true; do
            ch="${pth:$offset:1}"
            if [[ -z "$ch" ]] || [[ "$ch" == ":" ]]; then
                set -- "$@" "${pth:$last:$((offset-last))}"
                last=$((offset+1))
                if [[ -z "$ch" ]]; then break; fi
            fi
            offset=$((offset+1))
        done

        for type in client server; do
            for name in "${bn}_$type" "${bn}-$type"; do
                for dir in "$@"; do
                    if [[ -n "$dir" ]]; then
                        bin="$dir/$name$suffix"
                        if [[ -f "$bin" ]] && [[ -x "$bin" ]]; then return; fi
                    fi
                done
            done
        done

        echo "no $bn client or server found" >&2
        exit 1
    }

    setHosts() {
        setAddr() {
            local value="$3:$4"
            case "$3" in "["*) ;; *":"*) value="[$3]:$4";; esac
            if [[ "$1" -eq 0 ]]; then
                key0="--$2"
                value0="$value"
            else
                key1="--$2"
                value1="$value"
            fi
        }
        if [[ "$type" == 'client' ]]; then
            setAddr 0 localaddr "${1:-127.0.0.1}" "${2:-12948}"
            setAddr 1 remoteaddr "${3:-vps}" "${4:-29900}"
        else
            setAddr 0 listen "$3" "${4:-29900}"
            setAddr 1 target "${1:-127.0.0.1}" "${2:-12948}"
        fi
    }

    parseAndExecute() {
        local ch offset result

        nextToken() {
            result=
            while true; do
                offset=$((offset+1))
                ch="${1:$offset:1}"
                if [[ -z "$ch" ]]; then break; fi
                if [[ "$ch" == "\\" ]]; then
                    offset=$((offset+1))
                    ch="${1:$offset:1}"
                    if [[ -z "$ch" ]]; then
                        echo "nothing following final escape in $1" >&2
                        exit 1
                    fi
                else
                    case "$2" in *"$ch"*) break;; esac
                fi
                result="$result$ch"
            done
        }

        local opts="$SS_PLUGIN_OPTIONS"
        if [[ -n "$opts" ]]; then
            local len="$#"
            offset=-1
            while true; do
                nextToken "$opts" "=;"
                if [[ -z "$result" ]]; then
                    echo "empty key in $opts" >&2
                    exit 1
                fi
                set -- "$@" "--$result"
                if [[ "$ch" == "=" ]]; then
                    nextToken "$opts" ";"
                    set -- "$@" "$result"
                fi
                if [[ -z "$ch" ]]; then break; fi
            done

            while [[ "$len" -gt 0 ]]; do
                len=$((len-1))
                set -- "$@" "$1"
                shift
            done
        fi

        unset SS_LOCAL_HOST SS_LOCAL_PORT SS_REMOTE_HOST SS_REMOTE_PORT SS_PLUGIN_OPTIONS
        if has_builtin wait && has_builtin trap && has_builtin kill; then
            "$bin" "$key0" "$value0" "$key1" "$value1" "$@" &
            child_pid=$!
            if [[ -z "$child_pid" ]]; then
                echo Unknown error occur, cannot get process id of child process. >&2
                exit 1
            fi
            # Send all signal to kcptun
            trap_with_arg func_trap HUP INT QUIT ILL TRAP ABRT BUS FPE USR1 SEGV USR2 PIPE ALRM TERM
            local wait_result=0
            while true; do
                local value=0
                wait "$child_pid" 2>/dev/null || value=$?
                # 127 means this pid is not child process of our shell.
                if [[ "$value" == 127 ]]; then break; fi
                wait_result="$value"
                if [[ "$value" == 0 ]]; then break; fi
                # yield control of the CPU 
                sleep 0.1 || sleep 1
            done
            child_pid=
            return $wait_result
        else
            "$bin" "$key0" "$value0" "$key1" "$value1" "$@"
        fi
    }

    findBinary
    setHosts "$SS_LOCAL_HOST" "$SS_LOCAL_PORT" "$SS_REMOTE_HOST" "$SS_REMOTE_PORT"
    parseAndExecute "$@"
}

execute "$@"
